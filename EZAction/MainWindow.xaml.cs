using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
//using System.Windows.Threading;
using System.Text.Json;
using System.Text.Json.Serialization;
//using System.Timers;
using Microsoft.Win32;

namespace TestAppWPF
{
	/// <summary>
	/// Interaction logic for MainWindow.xaml
	/// </summary>
	///

	public partial class MainWindow : Window
	{
		// Global flag to check if editing mode is active
		bool editing = false;
		bool fileOpen = false;

		string targetCache;
		string windowTitle_Base = "Easy Action for ArmA 3";
		string openedFile = "";


		// Animation objects
		DoubleAnimation fadeOutAnim = new DoubleAnimation();
		Storyboard animPlay;

		/*---------------------------------*/
		/* Constants for the utility label */
		/*---------------------------------*/
		const string labelEmpty = "";
		const string editingMode = "Editing mode active";

		const string actionCreated = "Action created";
		const string actionEdited = "Action edited";
		const string actionDeleted = "Action deleted";

		const string validationError = "Action incomplete";
		const string noActionExists = "No actions exist";
		const string noActionSelected = "No action was selected";

		const string copiedToClipboard = "Copied to clipboard";
		const string actionsWritten = "Actions written to file";
		const string writeAborted = "Action write aborted";
		const string noActionsToWrite = "No actions to write";
		const string errorWrite = "Error during writing";


		/*---------------------------------*/
		/* Constants for the save button   */
		/*---------------------------------*/
		const string defaultSave = "Save Action";
		const string createAction = "Create Action";
		const string editAction = "Edit Action";



		public MainWindow()
		{
			//Set up basic settings
			if (Properties.Settings.Default.defaultSavePath == "")
			{
				//MessageBox.Show("Welcome to EZ-Action!" + "\n" + "Please select a working directory. All files generated by this program will be saved there." + "\n" + "You will be able to change this selection later.");
				Properties.Settings.Default.defaultSavePath = String.Concat(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments));
				Properties.Settings.Default.Save();
			}
			if (Properties.Settings.Default.profileDir == "") {
				Properties.Settings.Default.profileDir = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\ArmA 3";
				Properties.Settings.Default.Save();
			}

			InitializeComponent();

			// Always stays the same, so set as early as possible
			fadeOutAnim.From = 1.0;
			fadeOutAnim.To = 0.0;
			fadeOutAnim.FillBehavior = FillBehavior.Stop;

			Utility_Label.Text = labelEmpty;
		}

		private void DelEvent_Button_Click(object sender, RoutedEventArgs e)
		{
			object selectedItem = eventList.SelectedItem;

			if (eventList.Items.Count == 0)
			{
				SetUtilityLabel(noActionExists, true);
				return;
			}
			if (selectedItem != null)
			{
				aceEvent.eventList.RemoveAt(eventList.Items.IndexOf(selectedItem));

				eventList.Items.Remove(selectedItem);

				SetUtilityLabel(actionDeleted, true);
			}
			else
			{
				SetUtilityLabel(noActionSelected, true);
			}
		}

		private void RegEvent_Button_Click(object sender, RoutedEventArgs e)
		{
			// Action Validation
			if (ValidateAction())
			{
				SetUtilityLabel(validationError);
				return;
			}

			string concated = String.Concat("Function: ", functionText.Text);
			int intDuration = Convert.ToInt32(durationText.Text);

			// When editing, delete previous index and insert action at previous index
			if (editing) {
				int indexCache = eventList.SelectedIndex;
				eventList.Items.RemoveAt(indexCache);

				eventList.Items.Insert(indexCache, concated);

				aceEvent.eventList[indexCache] = new aceEvent(indexCache, functionText.Text, actionText.Text, progressCheck.IsChecked, intDuration, targetText.Text, classCheck.IsChecked, eventLabelText.Text);

				targetText.Text = targetCache;
				targetCache = "";

				SetUtilityLabel(actionEdited, true);

				DeactiveEditingMode();
			}
			// When adding, can just straight add and create object
			else {
				int id = eventList.Items.Add(concated);

				aceEvent newEvent = new aceEvent(id, functionText.Text, actionText.Text, progressCheck.IsChecked, intDuration, targetText.Text, classCheck.IsChecked, eventLabelText.Text);
				aceEvent.eventList.Add(newEvent);

				SetUtilityLabel(actionCreated, true);
			}

			// Reset all the UI element
			functionText.Text = "";

			classCheck.IsChecked = false;

			actionText.Text = "";
			eventLabelText.Text = "";

			progressCheck.IsChecked = true;
			durationText.Text = "10";
		}


		private void EventList_MouseDoubleClick(object sender, RoutedEventArgs e)
		{
			try
			{
				object selectedItem = eventList.SelectedItem;
				int index = eventList.Items.IndexOf(selectedItem);

				aceEvent editAction = aceEvent.eventList[index];

				ActivateEditingMode();

				//Disable the event list so only one thing can be edited at the same time
				eventList.IsEnabled = false;

				//If we're here, everything worked out, so let's get cracking
				targetCache = targetText.Text;

				targetText.Text = editAction.TargetEntity;
				classCheck.IsChecked = editAction.ClassCheck;

				functionText.Text = editAction.FunctionName;
				eventLabelText.Text = editAction.ActionLabel;

				progressCheck.IsChecked = editAction.ProgressBar;
				actionText.Text = editAction.DisplayText;
				durationText.Text = editAction.Duration.ToString();
			}
			// Catch OutOfRangeExceptions when the user clicks a non-existing item
			catch (System.ArgumentOutOfRangeException exception) {
				editing = false;
				DeactiveEditingMode();
				return;
			}
		}

		private void ActivateEditingMode()
		{
			editing = true;
			//Editing_Label.Visibility = Visibility.Visible;
			//Utility_Label.Text = editingMode;

			SetUtilityLabel(editingMode);

			RegEvent_Button.Content = editAction;

			eventList.IsEnabled = false;
			DelEvent_Button.IsEnabled = false;
			Generate_Button.IsEnabled = false;
			Clipboard_Button.IsEnabled = false;
		}

		private void DeactiveEditingMode()
		{
			editing = false;
			//Editing_Label.Visibility = Visibility.Hidden;
			//Utility_Label.Text = labelEmpty;

			//SetUtilityLabel(labelEmpty);

			RegEvent_Button.Content = createAction;

			eventList.IsEnabled = true;
			DelEvent_Button.IsEnabled = true;
			Generate_Button.IsEnabled = true;
			Clipboard_Button.IsEnabled = true;
		}

		private bool ValidateAction()
		{
			bool validationFail = false;

			if (targetText.Text == "")
			{
				validationFail = true;
				targetText.Background = Brushes.Salmon;
			}
			else
			{
				targetText.Background = Brushes.Transparent;
			}

			if (functionText.Text == "")
			{
				validationFail = true;
				functionText.Background = Brushes.Salmon;
			}
			else
			{
				functionText.Background = Brushes.Transparent;
			}

			if (eventLabelText.Text == "")
			{
				validationFail = true;
				eventLabelText.Background = Brushes.Salmon;
			}
			else
			{
				eventLabelText.Background = Brushes.Transparent;
			}


			//
			// Progress dependant
			//

			if (progressCheck.IsChecked == true && actionText.Text == "")
			{
				validationFail = true;
				actionText.Background = Brushes.Salmon;
			}
			else
			{
				actionText.Background = Brushes.Transparent;
			}

			if (progressCheck.IsChecked == true && durationText.Text == "")
			{
				validationFail = true;
				durationText.Background = Brushes.Salmon;
			}
			else
			{
				durationText.Background = Brushes.Transparent;
			}

			return validationFail;
		}

		private void Generate_Button_Click(object sender, RoutedEventArgs e)
		{
			//Return codes:
			//0 - success
			//1 - user abort
			//2 - nothing to declare
			//3 - other error
			//int varBuild = variableContent.BuildSQF();
			int evtBuild = aceEvent.BuildSQF();

			//new errorPrint(evtBuild);

			//if (evtBuild == 0)
			//{
			//	Utility_Label.Text = actionsWritten;
			//}

			switch (evtBuild)
			{
				case 0:
					SetUtilityLabel(actionsWritten, true);
					break;
				case 1:
					SetUtilityLabel(writeAborted, true);
					break;
				case 2:
					SetUtilityLabel(noActionsToWrite, true);
					break;
				case 3:
					SetUtilityLabel(errorWrite, true);
					break;
			}
		}

		private void ArmaDir_Button_Click(object sender, RoutedEventArgs e)
		{
			Process.Start(Properties.Settings.Default.profileDir);
		}

		private void SettingsButton_Click(object sender, RoutedEventArgs e)
		{
			Window1 win1 = new Window1();
			win1.Show();
		}

		private void ExportDir_Button_Click(object sender, RoutedEventArgs e)
		{
			Process.Start(Properties.Settings.Default.defaultSavePath);
		}

		private void OpenVarPage_Button_Click(object sender, RoutedEventArgs e)
		{

		}

		private void Clipboard_Button_Click(object sender, RoutedEventArgs e)
		{
			int result;
			result = aceEvent.BuildToClipboard();

			//if (result == 0)
			//{
			//	Utility_Label.Text = copiedToClipboard;
			//}

			switch (result)
			{
				case 0:
					SetUtilityLabel(copiedToClipboard, true);
					break;
				case 1:
					SetUtilityLabel(noActionsToWrite, true);
					break;
				case 2:
					SetUtilityLabel(errorWrite, true);
					break;
			}
		}

		private void NumberValidationTextBox(object sender, TextCompositionEventArgs e)
		{
			Regex regex = new Regex("[^0-9]+");
			e.Handled = regex.IsMatch(e.Text);
		}

		private void New_File_Click(object sender, RoutedEventArgs e)
		{
			ResetWindow();
		}

		private void ResetWindow()
		{
			this.Title = windowTitle_Base;
			openedFile = "";

			Utility_Label.Text = labelEmpty;

			editing = false;
			fileOpen = false;

			DeactiveEditingMode();

			aceEvent.ResetList();

			eventList.Items.Clear();

			targetText.Text = "";
			functionText.Text = "";
			eventLabelText.Text = "";
			eventLabelText.Text = "";

			durationText.Text = "10";

			classCheck.IsChecked = false;
			progressCheck.IsChecked = true;
		}

		private void OpenFile_Button_Click(object sender, RoutedEventArgs e)
		{
			//Flag to indicate the program ran
			bool ran = false;
			bool metaImported = false;
			//bool actionImported = false;
			bool errorAction = false;

			int index = 0;



			OpenFileDialog file = new OpenFileDialog
			{
				Filter = "EZ-Action Projects (*.ezp)|*.ezp",
				InitialDirectory = Properties.Settings.Default.defaultSavePath
			};

			if (file.ShowDialog() == true)
			{
				ResetWindow();

				fileOpen = true;
				openedFile = file.FileName;

				this.Title = SetNewTitle(openedFile);

				StreamReader readingFile = new StreamReader(file.FileName);

				string line;
				bool first = true;
				while ((line = readingFile.ReadLine()) != null)
				{
					ran = true;

					if (first)
					{
						metadata data = JsonSerializer.Deserialize<metadata>(line);

						if (!data.ValidateSelf())
						{
							//metaImported = true;
							MessageBox.Show("The metadata couldn't be loaded!");
						}
						//else
						//{

						//}

						first = false;
					}
					else
					{
						aceEvent deserializedEvent = JsonSerializer.Deserialize<TestAppWPF.aceEvent>(line);

						if (deserializedEvent.ValidateSelf())
						{
							//actionImported = true;

							aceEvent.eventList.Add(deserializedEvent);

							string concated = String.Concat("Function: ", deserializedEvent.FunctionName);
							eventList.Items.Add(concated);
						}
						else
						{
							MessageBox.Show("Action " + index + " was incorrect and couldn't be imported.");
						}
					}

					index++;
				}

				readingFile.Close();

				if (errorAction)
				{
					MessageBox.Show("At least one error occured during the import of the actions.");
				}

				if (!ran)
				{
					MessageBox.Show("The file was empty or couldn't be loaded!");
				}
			}
		}

		private void Save_Button_Click(object sender, RoutedEventArgs e)
		{
			if (fileOpen)
			{
				SaveProject();
			}
			else
			{
				SaveAs();
			}
		}

		private void SaveAs_Button_Click(object sender, RoutedEventArgs e)
		{
			SaveAs();
		}

		private void SaveProject()
		{
			string json = GetJSONs();
			string file = openedFile;

			File.WriteAllText(file, json);
		}

		private void SaveAs()
		{
			string json = GetJSONs();
			string file;

			SaveFileDialog saveDialog = new SaveFileDialog
			{
				AddExtension = true,
				DefaultExt = ".ezp",
				Filter = "EZ-Action Projects (*.ezp)|*.ezp",
				InitialDirectory = Properties.Settings.Default.defaultSavePath
			};

			if (saveDialog.ShowDialog() == true)
			{
				file = saveDialog.FileName;

				this.Title = SetNewTitle(file);

				openedFile = file;
				fileOpen = true;

				File.WriteAllText(file, json);
			}
		}

		private void SetUtilityLabel(string labelToSet, bool fadeOut = false, int fadeOffset = 1600, int fadeTime = 150)
		{
			// If animPlay is still active and hasn't been removed, do so
			if (animPlay != null)
			{
				animPlay.Stop(Utility_Label);
				//animPlay.Remove(Utility_Label);
				
				Utility_Label.Opacity = (double)1.0;

				Utility_Label.Visibility = Visibility.Visible;
			}

			Utility_Label.Text = labelToSet;
			Utility_Label.Visibility = Visibility.Visible;

			Utility_Label.Opacity = (double)1.0;

			if (fadeOut)
			{
				animPlay = new Storyboard();

				Utility_Label.Opacity = (double)1.0;

				fadeOutAnim.BeginTime = TimeSpan.FromMilliseconds(fadeOffset);
				fadeOutAnim.Duration = new Duration(TimeSpan.FromMilliseconds((double)fadeTime));

				animPlay.Children.Add(fadeOutAnim);
				//Storyboard.SetTarget(fadeOutAnim, Utility_Label);
				Storyboard.SetTargetProperty(fadeOutAnim, new PropertyPath(TextBlock.OpacityProperty));

				animPlay.Completed += CompletedHandler;
				animPlay.Begin(Utility_Label, HandoffBehavior.SnapshotAndReplace, true);
			}
		}

		private void CompletedHandler(object sender, EventArgs e)
		{
			animPlay.Stop(Utility_Label);
			//Utility_Label.Visibility = Visibility.Hidden;
			Utility_Label.Opacity = 0.0;
		}

		private string SetNewTitle(string file)
		{
			return String.Concat(windowTitle_Base, ": ", file);
		}

		private string GetJSONs()
		{
			metadata Data = new metadata();
			String Data_JSON = Data.ExportMetadata();

			string actions = aceEvent.ExportJSONString();

			return String.Concat(Data_JSON, Environment.NewLine, actions);
		}
	}
}


/* The officially sanctioned graveyard
 * Stuff that's not implemented but will be (mostly variable stuff) goes here
 *---------------------------------------------------------------------------*
 private void VarDel_Button_Click(object sender, RoutedEventArgs e)
		{
			object selectedItem = variableList.SelectedItem;

			if (selectedItem != null)
			{
				variableContent.v ariableList.RemoveAt(variableList.Items.IndexOf(selectedItem));

				variableList.Items.Remove(selectedItem);
			}
		}
 
 		private void AddVar_Button_Click(object sender, RoutedEventArgs e)
{
	if (variableText != null)
	{
		string concat = String.Concat("Variable: ", variableText.Text, "; Value: ", variableValue.Text);
		variableList.Items.Add(concat);

		variableContent var = new variableContent(variableText.Text, variableValue.Text);
		variableContent.variableList.Add(var);

		variableText.Text = "";
		variableValue.Text = "";
	}

*/