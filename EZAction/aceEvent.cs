using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.IO;
using System.Windows;
using Microsoft.Win32;

namespace TestAppWPF
{
	class aceEvent
	{
		//Global Variables
		public static List<aceEvent> eventList = new List<aceEvent>();
		public static string file;

		private string functionName;
		private string displayText;

		private string actionLabel;

		//private bool? condition;

		private bool progressBar;
		private int duration;

		private string targetEntity;
		private bool classCheck;

		public aceEvent(string impFunction, string impDisplay, bool? impCond, bool? impProgress, int impDuration, string impTarget, bool? classBox, string impLabel)
		{

			functionName = impFunction;
			displayText = impDisplay;
			//condition = impCond;
			actionLabel = impLabel;

			progressBar = Convert.ToBoolean(impProgress);
			duration = impDuration;

			targetEntity = impTarget;
			classCheck = Convert.ToBoolean(classBox);
		}

		public static int BuildSQF()
		{
			StringBuilder buildBuddy = new StringBuilder();

			if (eventList.Count <= 0)
			{
				MessageBox.Show("No actions to declare. Skipping step.");
				return 2;
			}

			//First step: declare save folder and filename
			SaveFileDialog saveDialog = new SaveFileDialog
			{
				Filter = "ArmA 3 Scripting Files (*.sqf)|*.sqf",
				FileName = "output_actions.sqf",
				InitialDirectory = Properties.Settings.Default.defaultSavePath
			};


			if (saveDialog.ShowDialog() == true)
			{
				//Cleanup file before writing
				File.Delete(saveDialog.FileName);

				file = saveDialog.FileName;
			}
			else
			{
				return 3;
			}

			string targets = DeclareTargets();
			string functions = BuildFunctions();
			string actions = CreateActions();
			string adds = AddActions();

			buildBuddy.Append(targets);
			buildBuddy.Append(functions);
			buildBuddy.Append(actions);
			buildBuddy.Append(adds);

			File.AppendAllText(file, buildBuddy.ToString());

			return 0;
		}

		public static void BuildToClipboard()
		{
			StringBuilder buildBuddy = new StringBuilder();

			string targets = DeclareTargets();
			string functions = BuildFunctions();
			string actions = CreateActions();
			string adds = AddActions();

			buildBuddy.Append(targets);
			buildBuddy.Append(functions);
			buildBuddy.Append(actions);
			buildBuddy.Append(adds);

			Clipboard.SetText(buildBuddy.ToString());
		}

		// Standard for only base and one thing to add
		public static string ConcatWithNewLine(string baseString, string toAdd)
		{
			return String.Concat(baseString, toAdd, Environment.NewLine);
		}

		// Overloading for n number of strings
		public static string ConcatWithNewLine(string baseString, string[] toAdd)
		{
			string returnString;

			returnString = baseString;

			foreach (string target in toAdd) {
				returnString = String.Concat(returnString, target);
			}

			return String.Concat(returnString, Environment.NewLine);
		}

		// To be used only for LineBreaks
		public static string ConcatNewLine(string baseString)
		{
			return String.Concat(baseString, Environment.NewLine);
		}

		private static string DeclareTargets()
		{
			string concat;
			//StringBuilder buildBuddy = new StringBuilder();

			concat = "//*--------------------------------------------------------------------------------*";
			concat = ConcatNewLine(concat);
			concat = ConcatWithNewLine(concat, new[] { "//| Generated by EzACT RC-2" });
			concat = ConcatWithNewLine(concat, new[] { "//| Total actions in this script:", eventList.Count.ToString() });
			concat = ConcatWithNewLine(concat, "//*--------------------------------------------------------------------------------*");
			concat = ConcatNewLine(concat);
			concat = ConcatNewLine(concat);
			//File.AppendAllText(file, concat);

			concat = ConcatWithNewLine(concat, "// Add your conditions here; Keep in mind, they have to be code blocks!");
			concat = ConcatNewLine(concat);
			concat = ConcatNewLine(concat);
			//File.AppendAllText(file, concat);

			concat = ConcatWithNewLine(concat, "//Target Declarations");
			//File.AppendAllText(file, concat);

			foreach (aceEvent element in eventList)
			{
				int index = eventList.IndexOf(element) + 1;
				string objectNum = String.Concat("_target", index);

				concat = ConcatWithNewLine(concat, new[] { objectNum, " = ", element.targetEntity, ";" });
				//File.AppendAllText(file, concat);
			}

			//concat = default(string);
			concat = ConcatNewLine(concat);
			concat = ConcatNewLine(concat);
			//File.AppendAllText(file, concat);

			return concat;
		}


		private static string BuildFunctions()
		{
			string concat;

			foreach (aceEvent element in eventList)
			{

				concat = ConcatWithNewLine("_", new[] { element.functionName, " = {" });
				//File.AppendAllText(file, concat);

				if (element.progressBar)
				{
					concat = ConcatWithNewLine(concat, new[] { "[", element.duration.ToString(), ", [], {" });
					//File.AppendAllText(file, concat);
				}

				/*concat = "//Flip the condition variable to false";
				concat = ConcatNewLine(concat);
				File.AppendAllText(file, concat);*/
			
				concat = ConcatWithNewLine(concat, "//Your code goes here!");
				concat = ConcatNewLine(concat);
				concat = ConcatNewLine(concat);
				concat = ConcatNewLine(concat);
				//File.AppendAllText(file, concat);

				if (element.progressBar) {
					concat = ConcatWithNewLine(concat, new[] { "}, {}, \"", element.displayText, "\"] call ace_common_fnc_progressBar;"});
					//File.AppendAllText(file, concat);
				}

				concat = ConcatWithNewLine(concat, "};");
				concat = ConcatNewLine(concat);
				concat = ConcatNewLine(concat);
				//File.AppendAllText(file, concat);

				return concat;
			}

			return "shit";
		}


		private static string CreateActions()
		{
			string concat;

			concat = "// Creating the actions; the condition defaults to true, so don't forget to adjust the conditions in the actions!";
			concat = ConcatNewLine(concat);
			//concat = ConcatWithNewLine(concat, "// Don't forget to adjust the conditions in the actions!");
			//File.AppendAllText(file, concat);

			foreach (aceEvent element in eventList)
			{
				int index = eventList.IndexOf(element) + 1;
				
				concat = ConcatWithNewLine(concat, new[] { "_generatedAction", index.ToString(), " = [\"missionaction", index.ToString(), "\", \"", element.actionLabel, "\", \"\", _", element.functionName, ", {true}] call ace_interact_menu_fnc_createAction;" });
				//File.AppendAllText(file, concat);

			}

			//Clear the string
			//concat = default(string);
			concat = ConcatNewLine(concat);
			concat = ConcatNewLine(concat);
			//File.AppendAllText(file, concat);

			return concat;
		}

		private static string AddActions()
		{
			string concat;

			concat = "// Adding the created actions to the chosen objects";
			concat = ConcatNewLine(concat);
			//File.AppendAllText(file, concat);

			foreach (aceEvent element in eventList)
			{
				int index = eventList.IndexOf(element) + 1;
				string objectNum = String.Concat("_target", index);


				if (element.classCheck == true)
				{
					concat = String.Concat(concat, "[typeOf ", objectNum, ", 0, [\"ACE_MainActions\"], _generatedAction", index, "] call ace_interact_menu_fnc_addActionToClass;");
				}
				else
				{
					concat = String.Concat(concat, "[", objectNum, ", 0, [\"ACE_MainActions\"], _generatedAction", index, "] call ace_interact_menu_fnc_addActionToObject;");
				}
				concat = ConcatNewLine(concat);
				//File.AppendAllText(file, concat);
			}
			return concat;
		}
	}




	class variableContent {
		public static List<variableContent> variableList = new List<variableContent>();

		private string name;
		private string value;

		public variableContent(string varName, string varVal) {
			name = varName;
			value = varVal;
		}

		public static int BuildSQF()
		{
			if (variableList.Count <= 0) {
				MessageBox.Show("No variables to declare. Skipping step.");
				return 2;
			}

			SaveFileDialog saveDialog = new SaveFileDialog
			{
				Filter = "ArmA 3 Scripting Files (*.sqf)|*.sqf",
				FileName = "output_variables.sqf",
				InitialDirectory = Properties.Settings.Default.defaultSavePath
			};

			if (saveDialog.ShowDialog() == true)
			{
				//Cleanup file before writing
				File.Delete(saveDialog.FileName);

				foreach (variableContent element in variableList)
				{
					string line;
					//If it's only numbers OR bool values, treat as such
					if (Regex.IsMatch(element.value, "^[0-9]*$") || element.value == "true" || element.value == "false")
					{
						line = String.Concat(element.name, " = ", element.value, "; publicVariable \"", element.name, "\";");
					}
					//Else treat as foreign
					else
					{
						line = String.Concat(element.name, " = \"", element.value, "\"; publicVariable \"", element.name, "\";");
					}

					//File.AppendAllText(saveDialog.FileName, line + Environment.NewLine);
				}
				return 0;
			}
			else {
				return 1;
			}
		return 3;
		}
		
	}

	class errorPrint
	{

		public errorPrint(int evtBuild) {
			string displayString = "";
			//switch (varBuild) {
			//	case 0:
			//		displayString = "Variables successfully exported";
			//		break;
			//	case 1:
			//		displayString = "Variable write aborted by user";
			//		break;
			//	case 2:
			//		displayString = "No variables to write";
			//		break;
			//	case 3:
			//		displayString = "An unspecified error occured while writing variables!";
			//		break;
			//}

			displayString = String.Concat(displayString, Environment.NewLine);

			switch (evtBuild){
				case 0:
					displayString = String.Concat(displayString, "Actions successfully exported");
					break;
				case 1:
					displayString = String.Concat(displayString, "Action write aborted by user");
					break;
				case 2:
					displayString = String.Concat(displayString, "No actions to write");
					break;
				case 3:
					displayString = String.Concat(displayString, "An unspecified error occured while writing actions!");
					break;
			}

			MessageBox.Show(displayString);
		}
	}
}


/* Be warned all ye who enter
 * For this be the graveyard of code
 * It lieth in rest, as is bestowed
 * Free, from the demands of it's inventor

foreach (aceEvent element in eventList)
{
	int index = eventList.IndexOf(element) + 1;

	string objectNum = String.Concat("_target", index);

	string concat;
	concat = String.Concat("//Generated actions ", eventList.IndexOf(element) + 1);
	concat = ConcatNewLine(concat);
	concat = ConcatNewLine(concat);
	File.AppendAllText(file, concat);

	//string conditionConcat = string.Concat("_condition" + index);
	//concat = String.Concat("_condition" + index, " = {!(", element.condition, ")};");
	//File.AppendAllText(file, concat);

	concat = String.Concat("//Target Declaration");
	concat = ConcatNewLine(concat);
	File.AppendAllText(file, concat);

	concat = String.Concat(objectNum," = ", element.targetEntity, ";");
	concat = ConcatNewLine(concat);
	File.AppendAllText(file, concat);

	concat = ConcatNewLine(concat);
	concat = ConcatNewLine(concat);

	concat = String.Concat("//function #", eventList.IndexOf(element));
	concat = ConcatNewLine(concat);
	File.AppendAllText(file, concat);

	concat = String.Concat("_", element.functionName, " = {");
	concat = ConcatNewLine(concat);
	File.AppendAllText(file, concat);

	if(element.progressBar) {
		concat = String.Concat("[", element.duration, ", [], {");
		concat = ConcatNewLine(concat);
		concat = ConcatNewLine(concat);
		File.AppendAllText(file, concat);
	}

	concat = "//Flip the condition variable to false";
	concat = ConcatNewLine(concat);
	File.AppendAllText(file, concat);

	/*concat = String.Concat(element.condition, " = false; publicVariable \"", element.condition, "\";");
	concat = ConcatNewLine(concat);
	File.AppendAllText(file, concat);*/
/*
					concat = "//Your code goes here!";
					concat = ConcatNewLine(concat);
					concat = ConcatNewLine(concat);
					concat = ConcatNewLine(concat);
					File.AppendAllText(file, concat);

					if (element.progressBar) {
						concat = String.Concat("}, {}, \"", element.displayText, "\"] call ace_common_fnc_progressBar;");
						concat = ConcatNewLine(concat);
						File.AppendAllText(file, concat);
					}

					concat = String.Concat("};");
					concat = ConcatNewLine(concat);
					concat = ConcatNewLine(concat);
					File.AppendAllText(file, concat);

					concat = "//Add action to object";
					concat = ConcatNewLine(concat);
					File.AppendAllText(file, concat);

					concat = String.Concat("_generatedAction", index," = [\"missionaction", index, "\", \"", element.actionLabel, "\", \"\", _", element.functionName, ", CONDITION_CODE_GOES_HERE] call ace_interact_menu_fnc_createAction;");
					concat = ConcatNewLine(concat);
					File.AppendAllText(file, concat);


					if (element.classCheck == true) {
						concat = String.Concat("[typeOf ", objectNum, ", 0, [\"ACE_MainActions\"], _generatedAction", index, "] call ace_interact_menu_fnc_addActionToClass;");
					}
					else {
						concat = String.Concat("[", objectNum, ", 0, [\"ACE_MainActions\"], _generatedAction", index, "] call ace_interact_menu_fnc_addActionToObject;");
					}
					concat = ConcatNewLine(concat);
					concat = ConcatNewLine(concat);
					concat = ConcatNewLine(concat);
					File.AppendAllText(file, concat);
				}
				return 0;
			}*/
/*else
{
	return 1;
}*/